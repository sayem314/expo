{"version":3,"file":"AdOptionsView.js","sourceRoot":"","sources":["../src/AdOptionsView.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,MAAM,mBAAmB,CAAC;AAC7D,OAAO,UAAU,MAAM,YAAY,CAAC;AACpC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,QAAQ,EAAQ,cAAc,EAAE,MAAM,cAAc,CAAC;AAE9D,OAAO,EAAE,oBAAoB,EAA6B,MAAM,gBAAgB,CAAC;AAEjF,IAAK,iBAGJ;AAHD,WAAK,iBAAiB;IACpB,qEAAc,CAAA;IACd,iEAAY,CAAA;AACd,CAAC,EAHI,iBAAiB,KAAjB,iBAAiB,QAGrB;AAQD,MAAM,CAAC,OAAO,OAAO,aAAc,SAAQ,KAAK,CAAC,SAAgB;IAC/D,MAAM,CAAC,YAAY,GAAG;QACpB,QAAQ,EAAE,EAAE;QACZ,WAAW,EAAE,YAAY;KAC1B,CAAC;IAEF,qBAAqB,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,YAAY,CAAC;IAEtE,MAAM;QACJ,MAAM,KAAK,GAAG,IAAI,CAAC,qBAAqB,EAAE;YACxC,CAAC,CAAC;gBACE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC;gBAC9B,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;aAC5B;YACH,CAAC,CAAC;gBACE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;gBAC1B,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC;aAChC,CAAC;QAEN,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACvD,MAAM,qBAAqB,GACzB,QAAQ,CAAC,EAAE,KAAK,SAAS;YACvB,CAAC,CAAC;gBACE,QAAQ;gBACR,WAAW,EAAE,IAAI,CAAC,qBAAqB,EAAE;oBACvC,CAAC,CAAC,iBAAiB,CAAC,UAAU;oBAC9B,CAAC,CAAC,iBAAiB,CAAC,QAAQ;aAC/B;YACH,CAAC,CAAC,IAAI,CAAC;QAEX,OAAO,CACL,oBAAC,oBAAoB,CAAC,QAAQ,QAC3B,CAAC,YAA8C,EAAE,EAAE;YAClD,MAAM,SAAS,GAAG,UAAU,CAAC,YAAY,IAAI,YAAY,CAAC,eAAe,CAAC,CAAC;YAC3E,OAAO,CACL,oBAAC,mBAAmB,OACd,KAAK,KACL,qBAAqB,EACzB,KAAK,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,EAChC,eAAe,EAAE,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,GAClD,CACH,CAAC;QACJ,CAAC,CAC6B,CACjC,CAAC;IACJ,CAAC;;AAKH,iGAAiG;AACjG,MAAM,CAAC,MAAM,mBAAmB,GAC9B,wBAAwB,CAAC,eAAe,CAAC,CAAC","sourcesContent":["import { requireNativeViewManager } from 'expo-modules-core';\nimport nullthrows from 'nullthrows';\nimport React from 'react';\nimport { Platform, View, findNodeHandle } from 'react-native';\n\nimport { AdOptionsViewContext, AdOptionsViewContextValue } from './withNativeAd';\n\nenum NativeOrientation {\n  Horizontal = 0,\n  Vertical = 1,\n}\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  iconSize: number;\n  iconColor?: string;\n  orientation: 'horizontal' | 'vertical';\n};\n\nexport default class AdOptionsView extends React.Component<Props> {\n  static defaultProps = {\n    iconSize: 23,\n    orientation: 'horizontal',\n  };\n\n  shouldAlignHorizontal = () => this.props.orientation === 'horizontal';\n\n  render() {\n    const style = this.shouldAlignHorizontal()\n      ? {\n          width: this.props.iconSize * 2,\n          height: this.props.iconSize,\n        }\n      : {\n          width: this.props.iconSize,\n          height: this.props.iconSize * 2,\n        };\n\n    const { iconSize, orientation, ...props } = this.props;\n    const platformSpecificProps =\n      Platform.OS === 'android'\n        ? {\n            iconSize,\n            orientation: this.shouldAlignHorizontal()\n              ? NativeOrientation.Horizontal\n              : NativeOrientation.Vertical,\n          }\n        : null;\n\n    return (\n      <AdOptionsViewContext.Consumer>\n        {(contextValue: AdOptionsViewContextValue | null) => {\n          const adViewRef = nullthrows(contextValue && contextValue.nativeAdViewRef);\n          return (\n            <NativeAdOptionsView\n              {...props}\n              {...platformSpecificProps}\n              style={[this.props.style, style]}\n              nativeAdViewTag={findNodeHandle(adViewRef.current)}\n            />\n          );\n        }}\n      </AdOptionsViewContext.Consumer>\n    );\n  }\n}\n\n// The native AdOptionsView has the same props as regular View\nexport type NativeAdOptionsView = React.Component<Props>;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- the type and variable share a name\nexport const NativeAdOptionsView: React.ComponentType<any> =\n  requireNativeViewManager('AdOptionsView');\n"]}