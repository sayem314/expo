{"version":3,"file":"withNativeAd.js","sourceRoot":"","sources":["../src/withNativeAd.tsx"],"names":[],"mappings":"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","sourcesContent":["import { requireNativeViewManager } from 'expo-modules-core';\nimport { EventSubscription } from 'fbemitter';\nimport nullthrows from 'nullthrows';\nimport React from 'react';\nimport { Platform, View, findNodeHandle } from 'react-native';\n\nimport { NativeAdIconView } from './AdIconView';\nimport { NativeAdMediaView } from './AdMediaView';\nimport AdsManager from './NativeAdsManager';\n\nconst NativeAdLayout: React.ComponentType | null =\n  Platform.OS === 'android' ? requireNativeViewManager('NativeAdLayout') : null;\n\ntype AdContainerProps<P> = {\n  adsManager: AdsManager;\n  // TODO: rename this to onAdLoad\n  onAdLoaded?: ((ad: NativeAd) => void) | null;\n  onError?: (error: Error) => void;\n} & Pick<P, Exclude<keyof P, keyof AdProps>>;\n\ntype AdContainerState = {\n  ad: NativeAd | null;\n  canRequestAds: boolean;\n};\n\ntype AdProps = { nativeAd: NativeAd };\n\ntype AdNodeHandles = {\n  adMediaViewNodeHandle?: number | null;\n  adIconViewNodeHandle?: number | null;\n  interactiveTriggerNodeHandles?: Map<React.Component, number>;\n};\n\n/**\n * A higher-order function that wraps the given `Component` type and returns a new container\n * component type that passes in an extra `nativeAd` prop to the wrapped component.\n *\n * The container component renders null if the native ads manager is not yet ready to display ads or\n * if no ad could be loaded.\n */\nexport default function withNativeAd<P>(\n  Component: React.ComponentType<P & AdProps>\n): React.ComponentType<AdContainerProps<P>> {\n  return class NativeAdContainer extends React.Component<AdContainerProps<P>, AdContainerState> {\n    _readySubscription: EventSubscription | null = null;\n    _errorSubscription: EventSubscription | null = null;\n    _nativeAdViewRef = React.createRef<NativeAdView>();\n    _adMediaViewNodeHandle: number | null = null;\n    _adIconViewNodeHandle: number | null = null;\n    _interactiveTriggerNodeHandles: Map<React.Component, number> = new Map();\n\n    state: AdContainerState;\n\n    constructor(props: AdContainerProps<P>) {\n      super(props);\n      this.state = {\n        ad: null,\n        canRequestAds: props.adsManager.isValid,\n      };\n    }\n\n    componentDidMount() {\n      if (!this.state.canRequestAds) {\n        // On mounting, listen to the ads manager to learn when it is ready to display ads\n        this._readySubscription = this.props.adsManager.onAdsLoaded(() => {\n          this.setState({ canRequestAds: true });\n        });\n      }\n      this._errorSubscription = this.props.adsManager.onAdsErrored((error) => {\n        // From what I, @sjchmiela, understand, an error may be encountered multiple times\n        // and it does *not* mean that the manager is not able to request ads at all -\n        // - this may have been an intermittent error -- that's why we don't set canRequestAds to false\n        // here.\n        // If the configuration is invalid from the start, the manager will never emit\n        // the onAdsLoaded event and the component would never think it could request ads.\n        if (this.props.onError) {\n          this.props.onError(error);\n        }\n      });\n    }\n\n    componentWillUnmount() {\n      if (this._readySubscription) {\n        this._readySubscription.remove();\n        this._readySubscription = null;\n      }\n      if (this._errorSubscription) {\n        this._errorSubscription.remove();\n        this._errorSubscription = null;\n      }\n    }\n\n    render() {\n      if (!this.state.canRequestAds) {\n        return null;\n      }\n\n      const { adsManager } = this.props;\n      const props = this._getForwardedProps();\n\n      const viewHierarchy = (\n        <NativeAdView\n          ref={this._nativeAdViewRef}\n          adsManager={adsManager.placementId}\n          onAdLoaded={this._handleAdLoaded}>\n          <AdMediaViewContext.Provider value={this._adMediaViewContextValue}>\n            <AdIconViewContext.Provider value={this._adIconViewContextValue}>\n              <AdTriggerViewContext.Provider value={this._adTriggerViewContextValue}>\n                <AdOptionsViewContext.Provider value={this._adOptionsViewContextValue}>\n                  {this.state.ad ? <Component {...props} nativeAd={this.state.ad} /> : null}\n                </AdOptionsViewContext.Provider>\n              </AdTriggerViewContext.Provider>\n            </AdIconViewContext.Provider>\n          </AdMediaViewContext.Provider>\n        </NativeAdView>\n      );\n\n      if (NativeAdLayout) {\n        return <NativeAdLayout>{viewHierarchy}</NativeAdLayout>;\n      }\n\n      return viewHierarchy;\n    }\n\n    _getForwardedProps(): P {\n      const { adsManager, onAdLoaded, ...props } = this.props as any;\n      return props as P;\n    }\n\n    _handleAdLoaded = ({ nativeEvent: ad }: { nativeEvent: NativeAd }) => {\n      this.setState({ ad }, () => {\n        if (this.props.onAdLoaded) {\n          const ad = nullthrows(this.state.ad);\n          this.props.onAdLoaded(ad);\n        }\n      });\n    };\n\n    _adMediaViewContextValue = {\n      nativeRef: (component: NativeAdMediaView | null) => {\n        if (component) {\n          this._setAdNodeHandles({ adMediaViewNodeHandle: nullthrows(findNodeHandle(component)) });\n        } else {\n          this._setAdNodeHandles({ adMediaViewNodeHandle: null });\n        }\n      },\n    };\n\n    _adOptionsViewContextValue = {\n      nativeAdViewRef: this._nativeAdViewRef,\n    };\n\n    _adIconViewContextValue = {\n      nativeRef: (component: NativeAdIconView | null) => {\n        if (component) {\n          this._setAdNodeHandles({ adIconViewNodeHandle: nullthrows(findNodeHandle(component)) });\n        } else {\n          this._setAdNodeHandles({ adIconViewNodeHandle: null });\n        }\n      },\n    };\n\n    _adTriggerViewContextValue = {\n      registerComponent: (component: React.Component) => {\n        const nodeHandle = nullthrows(findNodeHandle(component));\n        const interactiveTriggerNodeHandles = new Map(this._interactiveTriggerNodeHandles);\n        interactiveTriggerNodeHandles.set(component, nodeHandle);\n        this._setAdNodeHandles({ interactiveTriggerNodeHandles });\n      },\n      unregisterComponent: (component: React.Component) => {\n        const interactiveTriggerNodeHandles = new Map(this._interactiveTriggerNodeHandles);\n        interactiveTriggerNodeHandles.delete(component);\n        this._setAdNodeHandles({ interactiveTriggerNodeHandles });\n      },\n      onTriggerAd: () => {\n        if (this._adMediaViewNodeHandle !== null && Platform.OS === 'android') {\n          const nodeHandle = findNodeHandle(this._nativeAdViewRef.current)!;\n          AdsManager.triggerEvent(nodeHandle);\n        }\n      },\n    };\n\n    /**\n     * Updates the registered ad views given their node handles. The node handles are not stored in\n     * this component's state nor does this method call \"setState\" to avoid unnecessarily\n     * re-rendering.\n     */\n    _setAdNodeHandles({\n      adMediaViewNodeHandle = this._adMediaViewNodeHandle,\n      adIconViewNodeHandle = this._adIconViewNodeHandle,\n      interactiveTriggerNodeHandles = this._interactiveTriggerNodeHandles,\n    }: AdNodeHandles): void {\n      const adMediaViewChanged = adMediaViewNodeHandle !== this._adMediaViewNodeHandle;\n      const adIconViewChanged = adIconViewNodeHandle !== this._adIconViewNodeHandle;\n\n      const interactiveTriggersChanged = !_areEqualSets(\n        new Set(interactiveTriggerNodeHandles.values()),\n        new Set(this._interactiveTriggerNodeHandles.values())\n      );\n\n      if (adMediaViewChanged || adIconViewChanged || interactiveTriggersChanged) {\n        this._adMediaViewNodeHandle = adMediaViewNodeHandle;\n        this._adIconViewNodeHandle = adIconViewNodeHandle;\n        this._interactiveTriggerNodeHandles = interactiveTriggerNodeHandles;\n\n        // TODO: handle unregistering views when components are unmounted\n        if (this._adMediaViewNodeHandle !== null && this._adIconViewNodeHandle !== null) {\n          AdsManager.registerViewsForInteractionAsync(\n            nullthrows(findNodeHandle(this._nativeAdViewRef.current)),\n            this._adMediaViewNodeHandle,\n            this._adIconViewNodeHandle,\n            [...this._interactiveTriggerNodeHandles.values()]\n          );\n        }\n      }\n    }\n  };\n}\n\ntype NativeAdViewProps = {\n  adsManager: string;\n  onAdLoaded?: (event: { nativeEvent: NativeAd }) => void;\n} & React.ComponentPropsWithRef<typeof View>;\n\ntype NativeAdView = React.Component<NativeAdViewProps>;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- the type and variable share a name\nconst NativeAdView: React.ComponentType<any> = requireNativeViewManager('CTKNativeAd');\n\n// React contexts for ad views that need to register with the ad container\nexport type AdIconViewContextValue = {\n  nativeRef: (component: NativeAdMediaView | null) => void;\n};\n\nexport type AdMediaViewContextValue = {\n  nativeRef: (component: NativeAdIconView | null) => void;\n};\n\nexport type AdTriggerViewContextValue = {\n  registerComponent: (component: React.Component) => void;\n  unregisterComponent: (component: React.Component) => void;\n  onTriggerAd: () => void;\n};\n\nexport type AdOptionsViewContextValue = {\n  nativeAdViewRef: React.RefObject<NativeAdView>;\n};\n\nexport const AdIconViewContext = React.createContext<AdIconViewContextValue | null>(null);\nexport const AdMediaViewContext = React.createContext<AdMediaViewContextValue | null>(null);\nexport const AdTriggerViewContext = React.createContext<AdTriggerViewContextValue | null>(null);\nexport const AdOptionsViewContext = React.createContext<AdOptionsViewContextValue | null>(null);\n\nexport type NativeAd = {\n  /**\n   * The headline the advertiser entered when they created their ad. This is usually the ad's main\n   * title.\n   */\n  headline?: string;\n\n  /**\n   * The link description which is additional information that the advertiser may have entered\n   */\n  linkDescription?: string;\n\n  /**\n   * The name of the Facebook Page or mobile app that represents the business running the ad\n   */\n  advertiserName?: string;\n\n  /**\n   * The ad's social context, such as, \"Over half a million users\"\n   */\n  socialContext?: string;\n\n  /**\n   * The call-to-action phrase of the ad, such as, \"Install Now\"\n   */\n  callToActionText?: string;\n\n  /**\n   * The body text, truncated to 90 characters, that contains the text the advertiser entered when\n   * they created their ad to tell people what the ad promotes\n   */\n  bodyText?: string;\n\n  /**\n   * The word \"ad\", translated into the viewer's language\n   */\n  adTranslation?: string;\n\n  /**\n   * The word \"promoted\", translated into the viewer's language\n   */\n  promotedTranslation?: string;\n\n  /**\n   * The word \"sponsored\", translated into the viewer's language\n   */\n  sponsoredTranslation?: string;\n};\n\nfunction _areEqualSets<T>(set1: Set<T>, set2: Set<T>): boolean {\n  if (set1.size !== set2.size) {\n    return false;\n  }\n\n  for (const item of set1.values()) {\n    if (!set2.has(item)) {\n      return false;\n    }\n  }\n  return true;\n}\n"]}