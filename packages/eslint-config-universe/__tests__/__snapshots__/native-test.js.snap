// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`doesn't conflict with Prettier: message 1`] = `
"No rules that are unnecessary or conflict with Prettier were found.
"
`;

exports[`doesn't conflict with Prettier: success 1`] = `true`;

exports[`lints with the React Native config: fixtures/all-00.js 1`] = `
Object {
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": Array [],
  "output": "import 'hi';

import a from 'a';
import { b } from 'b';
import c, { c1 } from 'c';
import * as d from 'd';

import e from './e';

export * as f from './f';

export class Example {
  static s = {
    a,
    b,
  };

  m = {};
  #n = null;
  x = 1_000;
  y = 100n;

  hi() {
    _fn() ?? this.byeAsync();
    m &&= {};
    s?.a?.();

    try {
      _fn();
    } catch {
      _fn();
    }

    this.#privateMethod();
  }

  async byeAsync() {
    const f = 1;
    _fn(a, b, c, c1, d, e, f);

    await import('z');

    for await (const v of gen()) {
      _fn(v);
    }
  }

  #privateMethod() {}
}

function _fn() {}

function* gen() {}
",
  "usedDeprecatedRules": Array [],
  "warningCount": 0,
}
`;

exports[`lints with the React Native config: fixtures/all-01.ts 1`] = `
Object {
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": Array [
    Object {
      "column": 3,
      "endColumn": 18,
      "endLine": 18,
      "line": 18,
      "message": "Duplicate name 'm'.",
      "messageId": "unexpected",
      "nodeType": "PropertyDefinition",
      "ruleId": "@typescript-eslint/no-dupe-class-members",
      "severity": 1,
    },
  ],
  "source": "import 'hi';

import a from 'a';
import { b } from 'b';
import c, { c1 } from 'c';
import * as d from 'd';

import e from './e';

@d
export class Example {
  static s = {
    a,
    b,
  };

  m: object = {};
  m: object = {};

  hi(): void {
    _fn();
  }

  async byeAsync(): Promise<void> {
    _fn(a, b, c, c1, d, e);
  }
}

function _fn(...args: any): void {}
",
  "usedDeprecatedRules": Array [],
  "warningCount": 1,
}
`;

exports[`lints with the React Native config: fixtures/all-02.js 1`] = `
Object {
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": Array [
    Object {
      "column": 7,
      "endColumn": 14,
      "endLine": 1,
      "line": 1,
      "message": "'unused1' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 1,
    },
    Object {
      "column": 10,
      "endColumn": 17,
      "endLine": 3,
      "line": 3,
      "message": "'unused2' is defined but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 1,
    },
    Object {
      "column": 9,
      "endColumn": 16,
      "endLine": 4,
      "line": 4,
      "message": "'unused3' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 1,
    },
  ],
  "source": "const unused1 = 0;

function unused2() {
  const unused3 = 'hi';
}
",
  "usedDeprecatedRules": Array [],
  "warningCount": 3,
}
`;

exports[`lints with the React Native config: fixtures/all-03.ts 1`] = `
Object {
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": Array [
    Object {
      "column": 7,
      "endColumn": 16,
      "endLine": 1,
      "line": 1,
      "message": "'tsUnused1' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 1,
    },
    Object {
      "column": 10,
      "endColumn": 19,
      "endLine": 3,
      "line": 3,
      "message": "'tsUnused2' is defined but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 1,
    },
    Object {
      "column": 9,
      "endColumn": 15,
      "endLine": 5,
      "line": 5,
      "message": "'asCast' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 1,
    },
    Object {
      "column": 9,
      "endColumn": 25,
      "endLine": 6,
      "line": 6,
      "message": "'angleBracketCast' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 1,
    },
    Object {
      "column": 28,
      "endColumn": 37,
      "endLine": 6,
      "line": 6,
      "message": "Use 'as string' instead of '<string>'.",
      "messageId": "as",
      "nodeType": "TSTypeAssertion",
      "ruleId": "@typescript-eslint/consistent-type-assertions",
      "severity": 1,
    },
  ],
  "source": "const tsUnused1 = 0;

function tsUnused2() {
  const x: any = 'hi';
  const asCast = x as string;
  const angleBracketCast = <string>x;
}
",
  "usedDeprecatedRules": Array [],
  "warningCount": 5,
}
`;

exports[`lints with the React Native config: fixtures/all-04.ts 1`] = `
Object {
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": Array [],
  "output": "export const blah = (): string[] => {
  return ['1'];
};
",
  "usedDeprecatedRules": Array [],
  "warningCount": 0,
}
`;

exports[`lints with the React Native config: fixtures/all-05.ts 1`] = `
Object {
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": Array [],
  "output": "export const blah = 3!;
",
  "usedDeprecatedRules": Array [],
  "warningCount": 0,
}
`;

exports[`lints with the React Native config: fixtures/all-06.ts 1`] = `
Object {
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": Array [],
  "output": "export const numberTest: number | null = null;
export const booleanTest: boolean | null = null;
export const symbolTest: symbol | null = null;
export const objectTest: object | null = null;
export const stringTest: string | null = null;
export const objectShorthandTest: object | null = null;
",
  "usedDeprecatedRules": Array [],
  "warningCount": 0,
}
`;

exports[`lints with the React Native config: fixtures/all-07.js 1`] = `
Object {
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": Array [],
  "output": "import b from 'b';
import c from 'c';

import d from './d';

const a = require('a');
const e = require('e');

export default a + b + c + d + e;
",
  "usedDeprecatedRules": Array [],
  "warningCount": 0,
}
`;

exports[`lints with the React Native config: fixtures/web-native-00.js 1`] = `
Object {
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": Array [],
  "usedDeprecatedRules": Array [],
  "warningCount": 0,
}
`;

exports[`lints with the React Native config: fixtures/web-native-01.js 1`] = `
Object {
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": Array [
    Object {
      "column": 5,
      "endColumn": 18,
      "endLine": 8,
      "line": 8,
      "message": "Do not use setState in componentDidMount",
      "messageId": "noSetState",
      "nodeType": "MemberExpression",
      "ruleId": "react/no-did-mount-set-state",
      "severity": 1,
    },
  ],
  "source": "import React from 'react';

export default class Example extends React.Component {
  props = { x: 'x' };

  componentDidMount() {
    alert('uh oh');
    this.setState({});
  }

  render() {
    return <div>{this.props.x}</div>;
  }
}
",
  "usedDeprecatedRules": Array [],
  "warningCount": 1,
}
`;

exports[`lints with the React Native config: fixtures/web-native-02.js 1`] = `
Object {
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": Array [],
  "usedDeprecatedRules": Array [],
  "warningCount": 0,
}
`;

exports[`lints with the React Native config: fixtures/web-native-03.js 1`] = `
Object {
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": Array [],
  "output": "import React from 'react';
import { View } from 'react-native';

export default function Example() {
  return <View testID=\\"test\\" />;
}
",
  "usedDeprecatedRules": Array [],
  "warningCount": 0,
}
`;

exports[`lints with the React Native config: fixtures/web-native-04.js 1`] = `
Object {
  "errorCount": 2,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": Array [
    Object {
      "column": 5,
      "endColumn": 14,
      "endLine": 10,
      "line": 10,
      "message": "React Hook \\"useEffect\\" is called conditionally. React Hooks must be called in the exact same order in every component render.",
      "nodeType": "Identifier",
      "ruleId": "react-hooks/rules-of-hooks",
      "severity": 2,
    },
    Object {
      "column": 10,
      "endColumn": 18,
      "endLine": 14,
      "line": 14,
      "message": "'notAHook' is defined but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 1,
    },
    Object {
      "column": 3,
      "endColumn": 12,
      "endLine": 15,
      "line": 15,
      "message": "React Hook \\"useEffect\\" is called in function \\"notAHook\\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \\"use\\".",
      "nodeType": "Identifier",
      "ruleId": "react-hooks/rules-of-hooks",
      "severity": 2,
    },
  ],
  "source": "import { useEffect } from 'react';

export default function Example(props) {
  const { dependentVariable } = props;
  useEffect(() => {
    console.log(dependentVariable);
  }, []);

  if (props.badConditionalHook) {
    useEffect(() => {});
  }
}

function notAHook() {
  useEffect(() => {});
}
",
  "usedDeprecatedRules": Array [],
  "warningCount": 1,
}
`;
