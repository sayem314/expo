{"version":3,"file":"ExpoImage.js","sourceRoot":"","sources":["../src/ExpoImage.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EACL,KAAK,EACL,sBAAsB,EACtB,aAAa,EACb,UAAU,EACV,QAAQ,EACR,YAAY,GACb,MAAM,cAAc,CAAC;AAMtB,MAAM,eAAe,GAAG,sBAAsB,CAAuB,WAAW,CAAC,CAAC;AAElF,MAAM,eAAe,GAAG,aAAa,CAAC,eAAe,CAAC;AAEtD,OAAO,EAAE,eAAe,EAAE,CAAC;AAE3B,MAAM,CAAC,OAAO,UAAU,SAAS,CAAC,EAChC,MAAM,EACN,KAAK,EACL,aAAa,EACb,sBAAsB,EACtB,GAAG,KAAK,EACG;IACX,MAAM,cAAc,GAAG,KAAK,CAAC,kBAAkB,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;IAC9D,MAAM,aAAa,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAClD,MAAM,mBAAmB,GAAG,KAAK,CAAC,kBAAkB,CAClD,aAAa,IAAI,sBAAsB,IAAI,EAAE,CAC9C,CAAC;IAEF,0DAA0D;IAC1D,IAAI,aAAa,IAAI,sBAAsB,EAAE;QAC3C,OAAO,CAAC,IAAI,CACV,0HAA0H,CAC3H,CAAC;KACH;IAED,iFAAiF;IACjF,sFAAsF;IACtF,0EAA0E;IAC1E,8EAA8E;IAC9E,6EAA6E;IAC7E,sDAAsD;IACtD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;QAClC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,cAAc,CAAC;QACzC,aAAa,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,IAAI,KAAK,CAAC;QACnD,aAAa,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,IAAI,MAAM,CAAC;KACvD;IAED,kDAAkD;IAClD,iDAAiD;IACjD,6CAA6C;IAC7C,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QAC7B,OAAO,aAAa,CAAC,WAAW,CAAC;QACjC,OAAO,aAAa,CAAC,YAAY,CAAC;QAClC,OAAO,aAAa,CAAC,aAAa,CAAC;QACnC,OAAO,aAAa,CAAC,YAAY,CAAC;QAClC,UAAU,GAAG,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC;KACxC;SAAM;QACL,OAAO,aAAa,CAAC,SAAS,CAAC;QAC/B,UAAU,GAAG,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC;KAC1C;IAED,kEAAkE;IAClE,wEAAwE;IACxE,2EAA2E;IAC3E,8DAA8D;IAC9D,gFAAgF;IAChF,8EAA8E;IAC9E,iFAAiF;IACjF,IAAI,UAAU,EAAE;QACd,MAAM,cAAc,GAAG,YAAY,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QACnE,MAAM,OAAO,GAAW,OAAO,cAAc,KAAK,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;QAChF,MAAM,KAAK,GAAG,OAAO,IAAI,EAAE,CAAC;QAC5B,IAAI,KAAK,KAAK,CAAC,CAAC,IAAI,KAAK,KAAK,GAAG,EAAE;YACjC,6EAA6E;YAC7E,OAAO,CAAC,IAAI,CACV,+JAA+J,CAChK,CAAC;SACH;KACF;IAED,OAAO,CACL,oBAAC,eAAe,OACV,KAAK,EACT,MAAM,EAAE,cAAc,EACtB,KAAK,EAAE,aAAa,EACpB,aAAa,EAAE,mBAAmB,GAClC,CACH,CAAC;AACJ,CAAC","sourcesContent":["import React from 'react';\nimport {\n  Image,\n  requireNativeComponent,\n  NativeModules,\n  StyleSheet,\n  Platform,\n  processColor,\n} from 'react-native';\n\nimport { ImageProps } from './Image';\n\ntype NativeExpoImageProps = ImageProps;\n\nconst NativeExpoImage = requireNativeComponent<NativeExpoImageProps>('ExpoImage');\n\nconst ExpoImageModule = NativeModules.ExpoImageModule;\n\nexport { ExpoImageModule };\n\nexport default function ExpoImage({\n  source,\n  style,\n  defaultSource,\n  loadingIndicatorSource,\n  ...props\n}: ImageProps) {\n  const resolvedSource = Image.resolveAssetSource(source ?? {});\n  const resolvedStyle = StyleSheet.flatten([style]);\n  const resolvedPlaceholder = Image.resolveAssetSource(\n    defaultSource ?? loadingIndicatorSource ?? {}\n  );\n\n  // If both are specified, we default to use default source\n  if (defaultSource && loadingIndicatorSource) {\n    console.warn(\n      \"<Image> component can't have both defaultSource and loadingIndicatorSource at the same time. Defaulting to defaultSource\"\n    );\n  }\n\n  // When possible, pass through the intrinsic size of the asset to the Yoga layout\n  // system. While this is also possible in native code, doing it here is more efficient\n  // as the yoga node gets initialized with the correct size from the start.\n  // In native code, there is a separation between the layout (shadow) nodes and\n  // actual views. Views that update the intrinsic content-size in Yoga trigger\n  // additional layout passes, which we want to prevent.\n  if (!Array.isArray(resolvedSource)) {\n    const { width, height } = resolvedSource;\n    resolvedStyle.width = resolvedStyle.width ?? width;\n    resolvedStyle.height = resolvedStyle.height ?? height;\n  }\n\n  // Shadows behave different on iOS, Android & Web.\n  // Android uses the `elevation` prop, whereas iOS\n  // and web use the regular `shadow...` props.\n  let hasShadows = false;\n  if (Platform.OS === 'android') {\n    delete resolvedStyle.shadowColor;\n    delete resolvedStyle.shadowOffset;\n    delete resolvedStyle.shadowOpacity;\n    delete resolvedStyle.shadowRadius;\n    hasShadows = !!resolvedStyle.elevation;\n  } else {\n    delete resolvedStyle.elevation;\n    hasShadows = !!resolvedStyle.shadowColor;\n  }\n\n  // Shadows are rendered quite differently on iOS, Android and web.\n  // - iOS renders the shadow along the transparent contours of the image.\n  // - Android renders an underlay which extends to the inside of the bounds.\n  // - Web renders the shadow only on the outside of the bounds.\n  // To achieve a consistent appearance on all platforms, it is highly recommended\n  // to set a background-color on the Image when using shadows. This will ensure\n  // consistent rendering on all platforms and mitigate Androids drawing artefacts.\n  if (hasShadows) {\n    const processedColor = processColor(resolvedStyle.backgroundColor);\n    const bkColor: number = typeof processedColor === 'number' ? processedColor : 0;\n    const alpha = bkColor >> 24;\n    if (alpha !== -1 && alpha !== 255) {\n      // To silence this warning, set background-color to a fully transparent color\n      console.warn(\n        `\"expo-image\" Shadows may not be rendered correctly for the transparent parts of images. Set \"backgroundColor\" to a non-transparent color when using a shadow.`\n      );\n    }\n  }\n\n  return (\n    <NativeExpoImage\n      {...props}\n      source={resolvedSource}\n      style={resolvedStyle}\n      defaultSource={resolvedPlaceholder}\n    />\n  );\n}\n"]}